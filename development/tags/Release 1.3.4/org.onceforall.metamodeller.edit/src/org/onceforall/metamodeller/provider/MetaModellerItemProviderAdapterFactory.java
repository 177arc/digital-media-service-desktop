/**
 * <copyright>
 * </copyright>
 *
 * $Id: MetaModellerItemProviderAdapterFactory.java,v 1.1 2006/08/29 00:59:39 marc Exp $
 */
package org.onceforall.metamodeller.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.onceforall.metamodeller.util.MetaModellerAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MetaModellerItemProviderAdapterFactory extends
		MetaModellerAdapterFactory implements ComposeableAdapterFactory,
		IChangeNotifier, IDisposable {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final String copyright = "Copyright 2006, Marc Maier";

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MetaModellerItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.metamodeller.ERootPackageType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ERootPackageTypeItemProvider eRootPackageTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.metamodeller.ERootPackageType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createERootPackageTypeAdapter() {
		if (eRootPackageTypeItemProvider == null) {
			eRootPackageTypeItemProvider = new ERootPackageTypeItemProvider(
					this);
		}

		return eRootPackageTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.metamodeller.EPackageType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EPackageTypeItemProvider ePackageTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.metamodeller.EPackageType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEPackageTypeAdapter() {
		if (ePackageTypeItemProvider == null) {
			ePackageTypeItemProvider = new EPackageTypeItemProvider(this);
		}

		return ePackageTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.metamodeller.MObjectType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MObjectTypeItemProvider mObjectTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.metamodeller.MObjectType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMObjectTypeAdapter() {
		if (mObjectTypeItemProvider == null) {
			mObjectTypeItemProvider = new MObjectTypeItemProvider(this);
		}

		return mObjectTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.metamodeller.MStepType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MStepTypeItemProvider mStepTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.metamodeller.MStepType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMStepTypeAdapter() {
		if (mStepTypeItemProvider == null) {
			mStepTypeItemProvider = new MStepTypeItemProvider(this);
		}

		return mStepTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.metamodeller.MPropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MPropertyTypeItemProvider mPropertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.metamodeller.MPropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMPropertyTypeAdapter() {
		if (mPropertyTypeItemProvider == null) {
			mPropertyTypeItemProvider = new MPropertyTypeItemProvider(this);
		}

		return mPropertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.metamodeller.MParameterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MParameterTypeItemProvider mParameterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.metamodeller.MParameterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMParameterTypeAdapter() {
		if (mParameterTypeItemProvider == null) {
			mParameterTypeItemProvider = new MParameterTypeItemProvider(this);
		}

		return mParameterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.metamodeller.MResultType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MResultTypeItemProvider mResultTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.metamodeller.MResultType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMResultTypeAdapter() {
		if (mResultTypeItemProvider == null) {
			mResultTypeItemProvider = new MResultTypeItemProvider(this);
		}

		return mResultTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.metamodeller.ENativeDataTypeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ENativeDataTypeTypeItemProvider eNativeDataTypeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.metamodeller.ENativeDataTypeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createENativeDataTypeTypeAdapter() {
		if (eNativeDataTypeTypeItemProvider == null) {
			eNativeDataTypeTypeItemProvider = new ENativeDataTypeTypeItemProvider(
					this);
		}

		return eNativeDataTypeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.metamodeller.ECustomDataTypeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ECustomDataTypeTypeItemProvider eCustomDataTypeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.metamodeller.ECustomDataTypeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createECustomDataTypeTypeAdapter() {
		if (eCustomDataTypeTypeItemProvider == null) {
			eCustomDataTypeTypeItemProvider = new ECustomDataTypeTypeItemProvider(
					this);
		}

		return eCustomDataTypeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.metamodeller.MReferenceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MReferenceTypeItemProvider mReferenceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.metamodeller.MReferenceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMReferenceTypeAdapter() {
		if (mReferenceTypeItemProvider == null) {
			mReferenceTypeItemProvider = new MReferenceTypeItemProvider(this);
		}

		return mReferenceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.metamodeller.MApplicationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MApplicationTypeItemProvider mApplicationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.metamodeller.MApplicationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMApplicationTypeAdapter() {
		if (mApplicationTypeItemProvider == null) {
			mApplicationTypeItemProvider = new MApplicationTypeItemProvider(
					this);
		}

		return mApplicationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.metamodeller.MReferenceValueType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MReferenceValueTypeItemProvider mReferenceValueTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.metamodeller.MReferenceValueType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMReferenceValueTypeAdapter() {
		if (mReferenceValueTypeItemProvider == null) {
			mReferenceValueTypeItemProvider = new MReferenceValueTypeItemProvider(
					this);
		}

		return mReferenceValueTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.metamodeller.MReferenceDataTypeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MReferenceDataTypeTypeItemProvider mReferenceDataTypeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.metamodeller.MReferenceDataTypeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMReferenceDataTypeTypeAdapter() {
		if (mReferenceDataTypeTypeItemProvider == null) {
			mReferenceDataTypeTypeItemProvider = new MReferenceDataTypeTypeItemProvider(
					this);
		}

		return mReferenceDataTypeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.metamodeller.MPrimitiveDataTypeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MPrimitiveDataTypeTypeItemProvider mPrimitiveDataTypeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.metamodeller.MPrimitiveDataTypeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMPrimitiveDataTypeTypeAdapter() {
		if (mPrimitiveDataTypeTypeItemProvider == null) {
			mPrimitiveDataTypeTypeItemProvider = new MPrimitiveDataTypeTypeItemProvider(
					this);
		}

		return mPrimitiveDataTypeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.metamodeller.MStatefulObjectType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MStatefulObjectTypeItemProvider mStatefulObjectTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.metamodeller.MStatefulObjectType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMStatefulObjectTypeAdapter() {
		if (mStatefulObjectTypeItemProvider == null) {
			mStatefulObjectTypeItemProvider = new MStatefulObjectTypeItemProvider(
					this);
		}

		return mStatefulObjectTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.metamodeller.MBusinessObjectType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MBusinessObjectTypeItemProvider mBusinessObjectTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.metamodeller.MBusinessObjectType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMBusinessObjectTypeAdapter() {
		if (mBusinessObjectTypeItemProvider == null) {
			mBusinessObjectTypeItemProvider = new MBusinessObjectTypeItemProvider(
					this);
		}

		return mBusinessObjectTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class)
					|| (((Class) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (eRootPackageTypeItemProvider != null)
			eRootPackageTypeItemProvider.dispose();
		if (ePackageTypeItemProvider != null)
			ePackageTypeItemProvider.dispose();
		if (mObjectTypeItemProvider != null)
			mObjectTypeItemProvider.dispose();
		if (mStepTypeItemProvider != null)
			mStepTypeItemProvider.dispose();
		if (mPropertyTypeItemProvider != null)
			mPropertyTypeItemProvider.dispose();
		if (mParameterTypeItemProvider != null)
			mParameterTypeItemProvider.dispose();
		if (mResultTypeItemProvider != null)
			mResultTypeItemProvider.dispose();
		if (eNativeDataTypeTypeItemProvider != null)
			eNativeDataTypeTypeItemProvider.dispose();
		if (eCustomDataTypeTypeItemProvider != null)
			eCustomDataTypeTypeItemProvider.dispose();
		if (mReferenceTypeItemProvider != null)
			mReferenceTypeItemProvider.dispose();
		if (mApplicationTypeItemProvider != null)
			mApplicationTypeItemProvider.dispose();
		if (mReferenceValueTypeItemProvider != null)
			mReferenceValueTypeItemProvider.dispose();
		if (mReferenceDataTypeTypeItemProvider != null)
			mReferenceDataTypeTypeItemProvider.dispose();
		if (mPrimitiveDataTypeTypeItemProvider != null)
			mPrimitiveDataTypeTypeItemProvider.dispose();
		if (mStatefulObjectTypeItemProvider != null)
			mStatefulObjectTypeItemProvider.dispose();
		if (mBusinessObjectTypeItemProvider != null)
			mBusinessObjectTypeItemProvider.dispose();
	}

}
