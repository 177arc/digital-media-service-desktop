/*
 * Revision History
 * $Log: LogicItemProviderAdapterFactory.java,v $
 * Revision 1.3  2007/05/12 11:00:48  marc
 * Moved to EMF model-based application.
 *
 * Revision 1.2  2006/09/19 12:52:48  marc
 * Updated to checkpoint progress.
 *
 */
package org.onceforall.dms.desktop.logic.provider;

import java.util.ArrayList;
import java.util.Collection;


import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.onceforall.dms.desktop.logic.LogicAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class LogicItemProviderAdapterFactory extends LogicAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final String copyright = "Copyright 2007, Marc Maier";

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LogicItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MObjectItemProvider mObjectItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMObjectAdapter() {
		if (mObjectItemProvider == null) {
			mObjectItemProvider = new MObjectItemProvider(this);
		}

		return mObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MParameterItemProvider mParameterItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMParameterAdapter() {
		if (mParameterItemProvider == null) {
			mParameterItemProvider = new MParameterItemProvider(this);
		}

		return mParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MPropertyItemProvider mPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMPropertyAdapter() {
		if (mPropertyItemProvider == null) {
			mPropertyItemProvider = new MPropertyItemProvider(this);
		}

		return mPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MResultItemProvider mResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMResultAdapter() {
		if (mResultItemProvider == null) {
			mResultItemProvider = new MResultItemProvider(this);
		}

		return mResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MCheckFreeDiskSpaceStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MCheckFreeDiskSpaceStepItemProvider mCheckFreeDiskSpaceStepItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MCheckFreeDiskSpaceStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMCheckFreeDiskSpaceStepAdapter() {
		if (mCheckFreeDiskSpaceStepItemProvider == null) {
			mCheckFreeDiskSpaceStepItemProvider = new MCheckFreeDiskSpaceStepItemProvider(this);
		}

		return mCheckFreeDiskSpaceStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MCheckInputLevelsStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MCheckInputLevelsStepItemProvider mCheckInputLevelsStepItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MCheckInputLevelsStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMCheckInputLevelsStepAdapter() {
		if (mCheckInputLevelsStepItemProvider == null) {
			mCheckInputLevelsStepItemProvider = new MCheckInputLevelsStepItemProvider(this);
		}

		return mCheckInputLevelsStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MRecordStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MRecordStepItemProvider mRecordStepItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MRecordStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMRecordStepAdapter() {
		if (mRecordStepItemProvider == null) {
			mRecordStepItemProvider = new MRecordStepItemProvider(this);
		}

		return mRecordStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MConvertToMP3Step} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MConvertToMP3StepItemProvider mConvertToMP3StepItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MConvertToMP3Step}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMConvertToMP3StepAdapter() {
		if (mConvertToMP3StepItemProvider == null) {
			mConvertToMP3StepItemProvider = new MConvertToMP3StepItemProvider(this);
		}

		return mConvertToMP3StepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MUpdatePublishedMp3sStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MUpdatePublishedMp3sStepItemProvider mUpdatePublishedMp3sStepItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MUpdatePublishedMp3sStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMUpdatePublishedMp3sStepAdapter() {
		if (mUpdatePublishedMp3sStepItemProvider == null) {
			mUpdatePublishedMp3sStepItemProvider = new MUpdatePublishedMp3sStepItemProvider(this);
		}

		return mUpdatePublishedMp3sStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MPublishNewMp3Step} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MPublishNewMp3StepItemProvider mPublishNewMp3StepItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MPublishNewMp3Step}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMPublishNewMp3StepAdapter() {
		if (mPublishNewMp3StepItemProvider == null) {
			mPublishNewMp3StepItemProvider = new MPublishNewMp3StepItemProvider(this);
		}

		return mPublishNewMp3StepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MEmailEventLogStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MEmailEventLogStepItemProvider mEmailEventLogStepItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MEmailEventLogStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMEmailEventLogStepAdapter() {
		if (mEmailEventLogStepItemProvider == null) {
			mEmailEventLogStepItemProvider = new MEmailEventLogStepItemProvider(this);
		}

		return mEmailEventLogStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MMp3Folder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MMp3FolderItemProvider mMp3FolderItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MMp3Folder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMMp3FolderAdapter() {
		if (mMp3FolderItemProvider == null) {
			mMp3FolderItemProvider = new MMp3FolderItemProvider(this);
		}

		return mMp3FolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MMp3} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MMp3ItemProvider mMp3ItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MMp3}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMMp3Adapter() {
		if (mMp3ItemProvider == null) {
			mMp3ItemProvider = new MMp3ItemProvider(this);
		}

		return mMp3ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MBurnCdStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MBurnCdStepItemProvider mBurnCdStepItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MBurnCdStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMBurnCdStepAdapter() {
		if (mBurnCdStepItemProvider == null) {
			mBurnCdStepItemProvider = new MBurnCdStepItemProvider(this);
		}

		return mBurnCdStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MTestStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MTestStepItemProvider mTestStepItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MTestStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMTestStepAdapter() {
		if (mTestStepItemProvider == null) {
			mTestStepItemProvider = new MTestStepItemProvider(this);
		}

		return mTestStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MNameTagMp3Step} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MNameTagMp3StepItemProvider mNameTagMp3StepItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MNameTagMp3Step}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMNameTagMp3StepAdapter() {
		if (mNameTagMp3StepItemProvider == null) {
			mNameTagMp3StepItemProvider = new MNameTagMp3StepItemProvider(this);
		}

		return mNameTagMp3StepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MDmsApplicationMGetDataUpgradeInfoStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MDmsApplicationMGetDataUpgradeInfoStepItemProvider mDmsApplicationMGetDataUpgradeInfoStepItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MDmsApplicationMGetDataUpgradeInfoStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMDmsApplicationMGetDataUpgradeInfoStepAdapter() {
		if (mDmsApplicationMGetDataUpgradeInfoStepItemProvider == null) {
			mDmsApplicationMGetDataUpgradeInfoStepItemProvider = new MDmsApplicationMGetDataUpgradeInfoStepItemProvider(this);
		}

		return mDmsApplicationMGetDataUpgradeInfoStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MDmsApplicationMUpgradeDataStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MDmsApplicationMUpgradeDataStepItemProvider mDmsApplicationMUpgradeDataStepItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MDmsApplicationMUpgradeDataStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMDmsApplicationMUpgradeDataStepAdapter() {
		if (mDmsApplicationMUpgradeDataStepItemProvider == null) {
			mDmsApplicationMUpgradeDataStepItemProvider = new MDmsApplicationMUpgradeDataStepItemProvider(this);
		}

		return mDmsApplicationMUpgradeDataStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MCreateDirectoryStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MCreateDirectoryStepItemProvider mCreateDirectoryStepItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MCreateDirectoryStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMCreateDirectoryStepAdapter() {
		if (mCreateDirectoryStepItemProvider == null) {
			mCreateDirectoryStepItemProvider = new MCreateDirectoryStepItemProvider(this);
		}

		return mCreateDirectoryStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MEnterWwxInformationStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MEnterWwxInformationStepItemProvider mEnterWwxInformationStepItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MEnterWwxInformationStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMEnterWwxInformationStepAdapter() {
		if (mEnterWwxInformationStepItemProvider == null) {
			mEnterWwxInformationStepItemProvider = new MEnterWwxInformationStepItemProvider(this);
		}

		return mEnterWwxInformationStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MEnterServiceInformationStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MEnterServiceInformationStepItemProvider mEnterServiceInformationStepItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MEnterServiceInformationStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMEnterServiceInformationStepAdapter() {
		if (mEnterServiceInformationStepItemProvider == null) {
			mEnterServiceInformationStepItemProvider = new MEnterServiceInformationStepItemProvider(this);
		}

		return mEnterServiceInformationStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MScript} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MScriptItemProvider mScriptItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MScript}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMScriptAdapter() {
		if (mScriptItemProvider == null) {
			mScriptItemProvider = new MScriptItemProvider(this);
		}

		return mScriptItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.onceforall.dms.desktop.logic.MDmsApplication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MDmsApplicationItemProvider mDmsApplicationItemProvider;

	/**
	 * This creates an adapter for a {@link org.onceforall.dms.desktop.logic.MDmsApplication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMDmsApplicationAdapter() {
		if (mDmsApplicationItemProvider == null) {
			mDmsApplicationItemProvider = new MDmsApplicationItemProvider(this);
		}

		return mDmsApplicationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (mObjectItemProvider != null) mObjectItemProvider.dispose();
		if (mParameterItemProvider != null) mParameterItemProvider.dispose();
		if (mPropertyItemProvider != null) mPropertyItemProvider.dispose();
		if (mResultItemProvider != null) mResultItemProvider.dispose();
		if (mScriptItemProvider != null) mScriptItemProvider.dispose();
		if (mDmsApplicationItemProvider != null) mDmsApplicationItemProvider.dispose();
		if (mDmsApplicationMGetDataUpgradeInfoStepItemProvider != null) mDmsApplicationMGetDataUpgradeInfoStepItemProvider.dispose();
		if (mDmsApplicationMUpgradeDataStepItemProvider != null) mDmsApplicationMUpgradeDataStepItemProvider.dispose();
		if (mEnterWwxInformationStepItemProvider != null) mEnterWwxInformationStepItemProvider.dispose();
		if (mEnterServiceInformationStepItemProvider != null) mEnterServiceInformationStepItemProvider.dispose();
		if (mCreateDirectoryStepItemProvider != null) mCreateDirectoryStepItemProvider.dispose();
		if (mCheckFreeDiskSpaceStepItemProvider != null) mCheckFreeDiskSpaceStepItemProvider.dispose();
		if (mCheckInputLevelsStepItemProvider != null) mCheckInputLevelsStepItemProvider.dispose();
		if (mRecordStepItemProvider != null) mRecordStepItemProvider.dispose();
		if (mConvertToMP3StepItemProvider != null) mConvertToMP3StepItemProvider.dispose();
		if (mUpdatePublishedMp3sStepItemProvider != null) mUpdatePublishedMp3sStepItemProvider.dispose();
		if (mPublishNewMp3StepItemProvider != null) mPublishNewMp3StepItemProvider.dispose();
		if (mEmailEventLogStepItemProvider != null) mEmailEventLogStepItemProvider.dispose();
		if (mMp3FolderItemProvider != null) mMp3FolderItemProvider.dispose();
		if (mMp3ItemProvider != null) mMp3ItemProvider.dispose();
		if (mBurnCdStepItemProvider != null) mBurnCdStepItemProvider.dispose();
		if (mTestStepItemProvider != null) mTestStepItemProvider.dispose();
		if (mNameTagMp3StepItemProvider != null) mNameTagMp3StepItemProvider.dispose();
	}

}
